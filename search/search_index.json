{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ez-animate","text":"<p>A high-level, declarative Python package for creating common Matplotlib animations with minimal boilerplate code.</p>"},{"location":"#project-goals","title":"Project Goals","text":"<ul> <li>Simplify Matplotlib animations: No need to write custom <code>init</code>/<code>update</code> functions or manage state manually.</li> <li>For data scientists, analysts, educators, and researchers: Quickly create standard animations for analysis, presentations, and teaching.</li> <li>Minimal code, maximum clarity: Focus on your data and story, not boilerplate.</li> </ul> <p>See the navigation for installation, usage, API, and contribution details.</p>"},{"location":"#example-animations","title":"Example Animations","text":""},{"location":"#regression-animation-with-sgd","title":"Regression Animation with SGD","text":"<p>This animation demonstrates SGD regression, showing how the model fits the data as the max_iter parameter increases. You can see how the model's predictions with each iteration change, and how the metrics evolve over time. </p>"},{"location":"#exponential-moving-average-forecast-animation","title":"Exponential Moving Average Forecast Animation","text":"<p>This animation illustrates how the Exponential Moving Average (EMA) forecast evolves over time, highlighting the smoothing effect of different alpha values. </p>"},{"location":"#clustering-animation-with-kmeans","title":"Clustering Animation with KMeans","text":"<p>This animation visualizes KMeans clustering, showing how the centroids and clusters change as the number of iterations increases, showcasing the algorithm's convergence process. </p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#animation-classes","title":"Animation Classes","text":"<p>This section describes the main animation classes provided by <code>ez-animate</code>. Each class is designed to create specific types of animations for different use cases, such as regression, classification, clustering, forecasting, and data transformation.</p>"},{"location":"api/#regressionanimation","title":"RegressionAnimation","text":"<p>Creates Matplotlib animations for regression models.</p> <ul> <li>Inherits from <code>AnimationBase</code>.</li> <li>Accepts a regression model, feature matrix <code>X</code>, and target vector <code>y</code>.</li> <li>Supports dynamic and static model parameters, PCA, and plot customization.</li> <li>Returns a Matplotlib <code>FuncAnimation</code> object for display or saving.</li> </ul> <p>Constructor: <pre><code>RegressionAnimation(\n    model,\n    X,\n    y,\n    test_size=0.3,\n    dynamic_parameter=None,\n    static_parameters=None,\n    keep_previous=False,\n    max_previous=None,\n    pca_components=1,\n    metric_fn=None,\n    plot_metric_progression=False,\n    max_metric_subplots=1,\n    **kwargs\n)\n</code></pre></p>"},{"location":"api/#parameters","title":"Parameters:","text":"<ul> <li><code>model</code>: Regression model class (e.g., <code>LinearRegression</code>, <code>SVR</code>).</li> <li><code>X</code>: Feature matrix (2D array-like).</li> <li><code>y</code>: Target vector (1D array-like).</li> <li><code>test_size</code>: Fraction of data to use for testing (default: 0.3).</li> <li><code>dynamic_parameter</code>: Parameter to vary dynamically (e.g., <code>C</code> for SVR).</li> <li><code>static_parameters</code>: Dictionary of static parameters (e.g., <code>{'kernel': 'linear'}</code>).</li> <li><code>keep_previous</code>: Whether to keep and display previous model states (default: False).</li> <li><code>max_previous</code>: Maximum number of previous states to keep (default: None).</li> <li><code>pca_components</code>: Number of PCA components to reduce dimensionality (default: 1).</li> <li><code>metric_fn</code>: Optional metric function or list of functions (e.g., MSE, R2) to calculate and display during animation.</li> <li><code>plot_metric_progression</code>: Whether to plot the progression of the metric over time.</li> <li><code>max_metric_subplots</code>: Maximum number of subplots to show for metric progression (if multiple metrics).</li> <li><code>**kwargs</code>: Additional keyword arguments for plot customization. See the \"Customization with kwargs\" section for details.</li> </ul>"},{"location":"api/#classificationanimation","title":"ClassificationAnimation","text":"<p>Creates Matplotlib animations for classification models. - Inherits from <code>AnimationBase</code>. - Accepts a classification model, feature matrix <code>X</code>, and target vector <code>y</code>. - Supports dynamic/static parameters, PCA, scaling, and plot customization. - Returns a Matplotlib <code>FuncAnimation</code> object for display or saving.</p> <p>Constructor: <pre><code>ClassificationAnimation(\n    model,\n    X,\n    y,\n    test_size=0.3,\n    dynamic_parameter=None,\n    static_parameters=None,\n    keep_previous=False,\n    scaler=None,\n    pca_components=2,\n    plot_step=0.02,\n    metric_fn=None,\n    plot_metric_progression=None,\n    max_metric_subplots=1,\n    **kwargs\n)\n</code></pre></p>"},{"location":"api/#parameters_1","title":"Parameters:","text":"<ul> <li><code>model</code>: Classification model class (e.g., <code>LogisticRegression</code>, <code>SVC</code>).</li> <li><code>X</code>: Feature matrix (2D array-like).</li> <li><code>y</code>: Target vector (1D array-like).</li> <li><code>test_size</code>: Fraction of data to use for testing (default: 0.3).</li> <li><code>dynamic_parameter</code>: Parameter to vary dynamically (e.g., <code>C</code> for SVC).</li> <li><code>static_parameters</code>: Dictionary of static parameters (e.g., <code>{'kernel': 'rbf'}</code>).</li> <li><code>keep_previous</code>: Whether to keep and display previous model states (default: False).</li> <li><code>scaler</code>: Scaler instance for preprocessing (e.g., <code>StandardScaler</code>).</li> <li><code>pca_components</code>: Number of PCA components to reduce dimensionality (default: 2).</li> <li><code>plot_step</code>: Step size for mesh grid in decision boundary plots (default: 0.02).</li> <li><code>metric_fn</code>: Optional metric function or list of functions (e.g., accuracy, F1) to calculate and display during animation.</li> <li><code>plot_metric_progression</code>: Whether to plot the progression of the metric over time.</li> <li><code>max_metric_subplots</code>: Maximum number of subplots to show for metric progression (if multiple metrics).</li> <li><code>**kwargs</code>: Additional keyword arguments for plot customization. See the \"Customization with kwargs\" section for details.</li> </ul>"},{"location":"api/#clusteringanimation","title":"ClusteringAnimation","text":"<p>Creates Matplotlib animations for clustering models (e.g., K-Means).</p> <ul> <li>Inherits from <code>AnimationBase</code>.</li> <li>Accepts a clustering model, input data, and optional true labels.</li> <li>Supports dynamic/static parameters, PCA, scaling, cluster center tracing, and plot customization.</li> <li>Returns a Matplotlib <code>FuncAnimation</code> object for display or saving.</li> </ul> <p>Constructor: <pre><code>ClusteringAnimation(\n    model,\n    data,\n    labels=None,\n    use_true_labels=False,\n    test_size=0.3,\n    dynamic_parameter=None,\n    static_parameters=None,\n    keep_previous=False,\n    trace_centers=False,\n    scaler=None,\n    pca_components=2,\n    metric_fn=None,\n    plot_metric_progression=None,\n    max_metric_subplots=1,\n    **kwargs\n)\n</code></pre></p>"},{"location":"api/#parameters_2","title":"Parameters:","text":"<ul> <li><code>model</code>: Clustering model class (e.g., <code>KMeans</code>, <code>DBSCAN</code>).</li> <li><code>data</code>: Input data for clustering (2D array-like).</li> <li><code>labels</code>: Optional true labels for coloring points (1D array-like or list).</li> <li><code>use_true_labels</code>: Whether to color points by true labels if available (default: False).</li> <li><code>test_size</code>: Fraction of data to use for testing (default: 0.3).</li> <li><code>dynamic_parameter</code>: Parameter to vary dynamically (e.g., <code>n_clusters</code>).</li> <li><code>static_parameters</code>: Dictionary of static parameters (e.g., <code>{'init': 'k-means++'}</code>).</li> <li><code>keep_previous</code>: Whether to keep and display previous cluster assignments/centers (default: False).</li> <li><code>trace_centers</code>: Whether to trace the movement of cluster centers over iterations (default: False).</li> <li><code>scaler</code>: Scaler instance for preprocessing (e.g., <code>StandardScaler</code>).</li> <li><code>pca_components</code>: Number of PCA components to reduce dimensionality (default: 2).</li> <li><code>metric_fn</code>: Optional metric function or list of functions (e.g., silhouette_score) to calculate and display during animation.</li> <li><code>plot_metric_progression</code>: Whether to plot the progression of metrics over frames.</li> <li><code>max_metric_subplots</code>: Maximum number of metric subplots to display.</li> <li><code>**kwargs</code>: Additional keyword arguments for plot customization. See the \"Customization with kwargs\" section for details.</li> </ul>"},{"location":"api/#forecastinganimation","title":"ForecastingAnimation","text":"<p>Creates Matplotlib animations for time series forecasting models.</p> <ul> <li>Inherits from <code>AnimationBase</code>.</li> <li>Accepts a forecasting model, training and test series, and forecast steps.</li> <li>Supports dynamic/static parameters and plot customization.</li> <li>Returns a Matplotlib <code>FuncAnimation</code> object for display or saving.</li> </ul> <p>Constructor: <pre><code>ForecastingAnimation(\n    model,\n    train_series,\n    test_series,\n    forecast_steps,\n    dynamic_parameter=None,\n    static_parameters=None,\n    keep_previous=False,\n    max_previous=None,\n    metric_fn=None,\n    plot_metric_progression=None,\n    max_metric_subplots=1,\n    **kwargs\n)\n</code></pre></p>"},{"location":"api/#parameters_3","title":"Parameters:","text":"<ul> <li><code>model</code>: Forecasting model class (e.g., <code>ARIMA</code>, <code>ExponentialSmoothing</code>).</li> <li><code>train_series</code>: Training time series data (1D or 2D array-like).</li> <li><code>test_series</code>: Test time series data (1D or 2D array-like).</li> <li><code>forecast_steps</code>: Number of steps to forecast at each frame.</li> <li><code>dynamic_parameter</code>: Parameter to vary dynamically (e.g., <code>order</code> for ARIMA).</li> <li><code>static_parameters</code>: Dictionary of static parameters (e.g., <code>{'trend': 'add'}</code>).</li> <li><code>keep_previous</code>: Whether to keep and display previous forecasts (default: False).</li> <li><code>max_previous</code>: Maximum number of previous forecasts to keep (default: None).</li> <li><code>metric_fn</code>: Optional metric function or list of functions (e.g., MSE, MAE) to calculate and display during animation.</li> <li><code>plot_metric_progression</code>: Whether to plot the progression of metrics over frames.</li> <li><code>max_metric_subplots</code>: Maximum number of metric subplots to display.</li> <li><code>**kwargs</code>: Additional keyword arguments for plot customization. See the \"Customization with kwargs\" section for details.</li> </ul>"},{"location":"api/#transformationanimation","title":"TransformationAnimation","text":"<p>Creates Matplotlib animations for data transformation steps (e.g., scaling, normalization, PCA).</p> <ul> <li>Inherits from <code>AnimationBase</code>.</li> <li>Accepts a transformer class and input data <code>X</code>.</li> <li>Supports dynamic/static parameters, optional metric tracking, and plot customization.</li> <li>Returns a Matplotlib <code>FuncAnimation</code> object for display or saving.</li> </ul> <p>Constructor: <pre><code>TransformationAnimation(\n  transformer,\n  X,\n  dynamic_parameter,\n  static_parameters=None,\n  keep_previous=False,\n  metric_fn=None,\n  plot_metric_progression=None,\n  max_metric_subplots=1,\n  **kwargs,\n)\n</code></pre></p>"},{"location":"api/#parameters_4","title":"Parameters:","text":"<ul> <li><code>transformer</code>: Transformer class (e.g., <code>StandardScaler</code>, <code>MinMaxScaler</code>, <code>PCA</code>).</li> <li><code>X</code>: Input data array (2D array-like).</li> <li><code>dynamic_parameter</code>: Name of the transformer parameter to vary dynamically over frames (e.g., <code>n_components</code>, <code>feature_range</code>). Required.</li> <li><code>static_parameters</code>: Dictionary of static parameters for the transformer (default: <code>None</code>).</li> <li><code>keep_previous</code>: Whether to keep and display previous transformed states (default: <code>False</code>).</li> <li><code>metric_fn</code>: Optional metric function or list of functions to calculate and display during animation. Each function should accept <code>(X_original, X_transformed)</code> and return a numeric value (e.g., reconstruction error, average distance).</li> <li><code>plot_metric_progression</code>: Whether to plot the progression of the metric(s) over time.</li> <li><code>max_metric_subplots</code>: Maximum number of subplots to show for metric progression (if multiple metrics).</li> <li><code>**kwargs</code>: Additional keyword arguments for plot customization. See the \"Customization with kwargs\" section for details.</li> </ul>"},{"location":"api/#common-methods","title":"Common Methods","text":"<p>All animation classes inherit the following methods:</p>"},{"location":"api/#setup_plot","title":"setup_plot","text":"<p><pre><code>setup_plot(title, xlabel, ylabel, legend_loc=\"upper left\", grid=True, figsize=(12, 6))\n</code></pre> Set up the Matplotlib figure and axes for the animation.</p> <ul> <li><code>title</code>: Title of the plot.</li> <li><code>xlabel</code>: X-axis label.</li> <li><code>ylabel</code>: Y-axis label.</li> <li><code>legend_loc</code>: Legend location (default: \"upper left\").</li> <li><code>grid</code>: Show grid lines (default: True).</li> <li><code>figsize</code>: Figure size (default: (12, 6)).</li> </ul>"},{"location":"api/#animate","title":"animate","text":"<p><pre><code>animate(frames, interval=150, blit=True, repeat=False)\n</code></pre> Create the animation using Matplotlib's <code>FuncAnimation</code>.</p> <ul> <li><code>frames</code>: Range or iterable of frames.</li> <li><code>interval</code>: Delay between frames in ms (default: 150).</li> <li><code>blit</code>: Use blitting for faster rendering (default: True).</li> <li><code>repeat</code>: Repeat the animation (default: False).</li> </ul>"},{"location":"api/#save","title":"save","text":"<p><pre><code>save(filename, writer=\"pillow\", fps=5, dpi=100)\n</code></pre> Save the animation to a file (e.g., GIF or MP4).</p> <ul> <li><code>filename</code>: Output file path.</li> <li><code>writer</code>: Animation writer (default: \"pillow\").</li> <li><code>fps</code>: Frames per second (default: 5).</li> <li><code>dpi</code>: Dots per inch (default: 100).</li> </ul>"},{"location":"api/#show","title":"show","text":"<p><pre><code>show()\n</code></pre> Display the animation in a window or notebook.</p>"},{"location":"api/#customization-with-kwargs","title":"Customization with <code>**kwargs</code>","text":"<p>You can customize the appearance of various plot elements by passing dictionaries of keyword arguments to the animation class constructor. These dictionaries are passed directly to the underlying Matplotlib plotting functions.</p>"},{"location":"api/#common-keyword-arguments","title":"Common Keyword Arguments","text":"<p>These <code>kwargs</code> can be used with any animation class.</p>"},{"location":"api/#general-plot-customization","title":"General Plot Customization","text":"<ul> <li><code>title_kwargs</code>: Customizes the main plot title. Passed to <code>ax.set_title()</code>.</li> <li>Example: <code>title_kwargs={'fontsize': 16, 'fontweight': 'bold'}</code></li> <li><code>suptitle_kwargs</code>: Customizes the figure's super-title. Passed to <code>fig.suptitle()</code>.</li> <li>Example: <code>suptitle_kwargs={'fontsize': 20, 'y': 0.98}</code></li> <li><code>xlabel_kwargs</code>: Customizes the x-axis label. Passed to <code>ax.set_xlabel()</code>.</li> <li>Example: <code>xlabel_kwargs={'fontsize': 12}</code></li> <li><code>ylabel_kwargs</code>: Customizes the y-axis label. Passed to <code>ax.set_ylabel()</code>.</li> <li>Example: <code>ylabel_kwargs={'fontsize': 12}</code></li> <li><code>ax_kwargs</code>: Customizes general axes properties. Passed to <code>ax.tick_params()</code>.</li> <li>Example: <code>ax_kwargs={'labelsize': 10}</code></li> <li><code>legend_kwargs</code>: Customizes the plot legend. Passed to <code>ax.legend()</code>.</li> <li>Example: <code>legend_kwargs={'loc': 'lower right', 'fontsize': 'small'}</code></li> <li><code>grid_kwargs</code>: Customizes the plot grid lines. Passed to <code>ax.grid()</code>.</li> <li>Example: <code>grid_kwargs={'linestyle': ':', 'alpha': 0.6}</code></li> </ul>"},{"location":"api/#metric-subplot-customization","title":"Metric Subplot Customization","text":"<p>These <code>kwargs</code> are used when <code>plot_metric_progression=True</code> in the animation class constructor. They customize the appearance of the metric subplots and their corresponding lines.</p> <ul> <li><code>metric_title_kwargs</code>: Customizes the metric subplot title(s).</li> <li><code>metric_line_kwargs</code>: Customizes the metric progression line(s).</li> <li><code>metric_ax_kwargs</code>: Customizes the metric subplot axes.</li> <li><code>metric_xlabel_kwargs</code>: Customizes the metric subplot x-axis label(s).</li> <li><code>metric_ylabel_kwargs</code>: Customizes the metric subplot y-axis label(s).</li> <li><code>metric_annotation_kwargs</code>: Customizes the text annotation for the metric value.</li> </ul>"},{"location":"api/#class-specific-keyword-arguments","title":"Class-Specific Keyword Arguments","text":"<p>The following <code>kwargs</code> are used with specific animation classes. They customize the appearance of the corresponding plot elements.</p>"},{"location":"api/#regressionanimation_1","title":"RegressionAnimation","text":"<ul> <li><code>scatter_kwargs</code>: Customizes the scatter plot for training data points.</li> <li>Example: <code>scatter_kwargs={'color': 'green', 's': 50}</code></li> <li><code>scatter_kwargs_test</code>: Customizes the scatter plot for test data points.</li> <li>Example: <code>scatter_kwargs_test={'color': 'orange', 'marker': 's'}</code></li> <li><code>line_kwargs</code>: Customizes the fitted regression line.</li> <li>Example: <code>line_kwargs={'color': 'purple', 'linewidth': 3}</code></li> </ul>"},{"location":"api/#classificationanimation_1","title":"ClassificationAnimation","text":"<ul> <li><code>scatter_kwargs</code>: Customizes the scatter plot for training data points.</li> <li>Example: <code>scatter_kwargs={'cmap': 'viridis', 's': 60}</code></li> <li><code>scatter_kwargs_test</code>: Customizes the scatter plot for test data points.</li> <li>Example: <code>scatter_kwargs_test={'marker': 'D', 's': 60}</code></li> <li><code>decision_boundary_kwargs</code>: Customizes the filled decision boundary regions. Passed to <code>ax.contourf()</code>.</li> <li>Example: <code>decision_boundary_kwargs={'alpha': 0.3, 'cmap': 'plasma'}</code></li> <li><code>decision_boundary_line_kwargs</code>: Customizes the decision boundary contour lines. Passed to <code>ax.contour()</code>.</li> <li>Example: <code>decision_boundary_line_kwargs={'linewidths': 2, 'colors': 'k'}</code></li> </ul>"},{"location":"api/#clusteringanimation_1","title":"ClusteringAnimation","text":"<ul> <li><code>scatter_kwargs</code>: Customizes the scatter plot for clustered training data points.</li> <li><code>scatter_kwargs_test</code>: Customizes the scatter plot for clustered test data points.</li> <li><code>cluster_gray_train_kwargs</code>: Customizes the appearance of un-clustered training points.</li> <li><code>cluster_gray_test_kwargs</code>: Customizes the appearance of un-clustered test points.</li> <li><code>cluster_center_kwargs</code>: Customizes the cluster center markers.</li> <li>Example: <code>cluster_center_kwargs={'marker': 'X', 's': 400, 'c': 'red'}</code></li> <li><code>prev_center_kwargs</code>: Customizes the markers for previous cluster centers (if <code>keep_previous=True</code>).</li> <li><code>trace_line_kwargs</code>: Customizes the lines tracing cluster center movement (if <code>trace_centers=True</code>).</li> <li>Example: <code>trace_line_kwargs={'linestyle': '-', 'linewidth': 1.5}</code></li> </ul>"},{"location":"api/#forecastinganimation_1","title":"ForecastingAnimation","text":"<ul> <li><code>train_line_kwargs</code>: Customizes the line plot for the training time series.</li> <li>Example: <code>train_line_kwargs={'color': 'gray', 'label': 'Historical Data'}</code></li> <li><code>vline_kwargs</code>: Customizes the vertical line indicating the start of the forecast.</li> <li>Example: <code>vline_kwargs={'color': 'red', 'linestyle': ':'}</code></li> <li><code>fitted_line_kwargs</code>: Customizes the line for the model's fitted values on the training data.</li> <li>Example: <code>fitted_line_kwargs={'color': 'orange', 'zorder': 4}</code></li> <li><code>forecast_line_kwargs</code>: Customizes the line for the forecasted values.</li> <li>Example: <code>forecast_line_kwargs={'color': 'purple', 'marker': 'o'}</code></li> </ul>"},{"location":"api/#transformationanimation_1","title":"TransformationAnimation","text":"<ul> <li><code>scatter_kwargs</code>: Customizes the scatter plot for the original input data points.</li> <li>Example: <code>scatter_kwargs={'color': 'blue', 'alpha': 0.6}</code></li> <li><code>scatter_kwargs_test</code>: Customizes the scatter plot for the transformed data points.</li> <li>Example: <code>scatter_kwargs_test={'color': 'orange', 'alpha': 0.7, 'marker': 'x'}</code></li> </ul>"},{"location":"compatibility/","title":"Compatibility","text":""},{"location":"compatibility/#api-compatibility-matrix","title":"API compatibility matrix","text":"<p>This guide summarizes the minimal method and shape expectations for models/transformers used by each animation class. Optional methods yield better visuals or UX; when missing, reasonable fallbacks are used.</p>"},{"location":"compatibility/#ataglance","title":"At\u2011a\u2011glance","text":"Animation class Required methods Shapes/assumptions Best visuals and optional extras RegressionAnimation fit(X, y), predict(X) X: (n_samples, n_features). If n_features &gt; 1, an internal PCA reduces to 1D for plotting. None required; optionally <code>keep_previous</code>/<code>max_previous</code> for trail effect. ClassificationAnimation fit(X, y), predict(X) X: (n_samples, 2). If &gt;2 features, internal PCA to 2D. Optional scaler may be applied by user. For a crisp boundary line: <code>predict_proba(X_grid)</code> or <code>decision_function(X_grid)</code>. With labels only, filled regions are drawn; the boundary line may be omitted. ClusteringAnimation fit(X) and predict(X) or labels_ after fit X: (n_samples, 2). If &gt;2 features, internal PCA to 2D. Optional scaler may be applied by user. <code>cluster_centers_</code> enables center markers. <code>trace_centers</code> works best when the number of centers is consistent across frames. ForecastingAnimation One of: fit(y_train) + forecast(steps) OR fit(X, y) + predict(k) or predict(X_future) train_series/test_series: 1D arrays/Series. Outputs coerced to 1D numpy arrays. Graceful fallbacks: if <code>predict(steps)</code> fails, <code>predict(X_future)</code> is attempted with a generated index. TransformationAnimation fit(X), transform(X) X: (n_samples, n_features). Current visuals assume \u22652 features for 2D scatter. dynamic_parameter (e.g., <code>n_components</code>) can drive the animation."},{"location":"compatibility/#details-by-class","title":"Details by Class","text":""},{"location":"compatibility/#regressionanimation","title":"RegressionAnimation","text":"<ul> <li>Required API: <code>fit(X, y)</code>, <code>predict(X)</code></li> <li>Shapes: <code>X</code> is <code>(n_samples, n_features)</code>. If <code>n_features</code> &gt; 1, a lightweight PCA reduces to 1 component for plotting against the target.</li> <li>Fallbacks: n/a</li> <li>Extras: <code>keep_previous</code> with optional <code>max_previous</code> to create fading line trails. Multiple metrics supported; enable <code>plot_metric_progression</code> for side-panel plots.</li> </ul>"},{"location":"compatibility/#classificationanimation","title":"ClassificationAnimation","text":"<ul> <li>Required API: <code>fit(X, y)</code>, <code>predict(X)</code></li> <li>Shapes: assumes 2D inputs. If X has &gt;2 features, an internal PCA reduces to 2D. You may pre-scale with your own scaler.</li> <li>Best visuals:<ul> <li><code>decision_function(X_grid)</code> \u2192 contour at 0 level (preferred when available)</li> <li><code>predict_proba(X_grid)</code> \u2192 take positive-class probability and contour at 0.5</li> </ul> </li> <li>Fallbacks: with only <code>predict</code>, filled decision regions are drawn from class labels; a separating contour line may be omitted.</li> <li>Extras: <code>keep_previous</code> fades older boundaries. Multiple metrics supported; enable <code>plot_metric_progression</code> to show trends.</li> </ul>"},{"location":"compatibility/#clusteringanimation","title":"ClusteringAnimation","text":"<ul> <li>Required API: <code>fit(X)</code> and either <code>predict(X)</code> or <code>labels_</code> set after fit.</li> <li>Shapes: 2D inputs; if more, internal PCA reduces to 2D.</li> <li>Best visuals: <code>cluster_centers_</code> to plot centers; <code>trace_centers</code> draws motion paths when the number of centers is consistent across frames.</li> <li>Metrics:<ul> <li>Unsupervised (X, labels): <code>silhouette_score</code>, <code>calinski_harabasz_score</code>, <code>davies_bouldin_score</code></li> <li>Supervised (y_true, labels): any callable metric if ground truth labels are available</li> </ul> </li> </ul>"},{"location":"compatibility/#forecastinganimation","title":"ForecastingAnimation","text":"<ul> <li>Required API (one of):<ul> <li><code>fit(y_train)</code> + <code>forecast(steps)</code></li> <li><code>fit(X, y)</code> + <code>predict(k)</code> or <code>predict(X_future)</code></li> </ul> </li> <li>Shapes: train_series/test_series are 1D. Outputs are coerced to 1D numpy arrays for plotting.</li> <li>Fallbacks: if <code>predict(steps)</code> isn\u2019t supported, a future index <code>X_future = np.arange(...).reshape(-1, 1)</code> is used with <code>predict(X_future)</code>.</li> <li>Extras: <code>keep_previous</code> for fading fitted/forecast lines; multiple metrics with optional progression panel.</li> </ul>"},{"location":"compatibility/#transformationanimation","title":"TransformationAnimation","text":"<ul> <li>Required API: <code>fit(X)</code>, <code>transform(X)</code></li> <li>Shapes: X should have \u22652 features for 2D scatter visuals. dynamic_parameter (e.g., n_components) drives the animation.</li> <li>Metrics: <code>callable metric(X_original, X_transformed)</code>. Progression panel supported.</li> </ul>"},{"location":"compatibility/#tips-and-practical-notes","title":"Tips and practical notes","text":"<ul> <li> <p>Metrics panel</p> <ul> <li>Pass a list of metric callables; set <code>plot_metric_progression=True</code> to enable a right\u2011side panel with compact trend lines. Values are annotated per frame.</li> <li>Control panel count with <code>max_metric_subplots</code>.</li> </ul> </li> <li> <p>Dimensionality reduction</p> <ul> <li>Regression: automatically reduced to 1D for plotting when <code>n_features &gt; 1</code>.</li> <li>Classification/Clustering: automatically reduced to 2D when <code>n_features &gt; 2</code>.</li> </ul> </li> <li> <p>Keep\u2011previous overlays</p> <ul> <li>Set <code>keep_previous=True</code> for historical context with fading alpha; use <code>max_previous</code> to cap rendered artists for performance.</li> </ul> </li> <li> <p>Data types</p> <ul> <li>numpy arrays are first\u2011class. train_test_split also supports pandas DataFrame/Series and scipy sparse matrices.</li> </ul> </li> <li> <p>Performance</p> <ul> <li>Dense decision meshes can be slow; increase <code>plot_step</code> (e.g., 0.05\u20130.1) or restrict axis ranges to speed up rendering.</li> </ul> </li> </ul> <p>If your model/transformer doesn\u2019t match these interfaces, a thin adapter that exposes the expected methods is usually enough to integrate with ez\u2011animate.</p>"},{"location":"contributing/","title":"Developer Guide","text":"<p>First off, thank you for considering contributing to <code>ez-animate</code>! We're excited to have your help. This guide provides all the necessary information to get your development environment set up and to start contributing.</p>"},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, please make sure you have the following installed on your system:</p> <ul> <li>Git: For version control.</li> <li>Python: Version 3.8 or newer.</li> <li>uv: The fast project and environment manager. If you don't have it, you can install it with:   <pre><code>pip install uv\n</code></pre></li> </ul>"},{"location":"contributing/#step-by-step-setup","title":"Step-by-Step Setup","text":"<p>This will guide you from cloning the repository to having a fully functional local development setup.</p>"},{"location":"contributing/#1-fork-and-clone-the-repository","title":"1. Fork and Clone the Repository","text":"<p>First, fork the repository on GitHub. Then, clone your fork to your local machine:</p> <pre><code>git clone https://github.com/SantiagoEnriqueGA/ez-animate.git\ncd ez-animate\n</code></pre>"},{"location":"contributing/#2-create-and-activate-the-virtual-environment","title":"2. Create and Activate the Virtual Environment","text":"<p>We use <code>uv</code> to manage our virtual environment. This keeps project dependencies isolated from your global Python installation.</p> <pre><code># Create the virtual environment in a .venv directory\nuv venv\n\n# Activate it\n# On macOS/Linux:\nsource .venv/bin/activate\n\n# On Windows (PowerShell):\n.venv\\Scripts\\Activate.ps1\n# On Windows (CMD):\n.venv\\Scripts\\activate.bat\n</code></pre> <p>You'll know the environment is active when you see <code>(.venv)</code> at the beginning of your command prompt.</p>"},{"location":"contributing/#3-install-dependencies","title":"3. Install Dependencies","text":"<p>Install the project in \"editable\" mode along with all development dependencies (for testing, linting, and documentation).</p> <pre><code># This command installs ez-animate and all its dependencies for development\nuv pip install -e .[dev]\n</code></pre> <p>Why this command?</p> <ul> <li><code>-e .</code>: Installs the package in editable mode. This means any changes you make to the source code in the <code>src/</code> directory will be immediately available in your environment without needing to reinstall.</li> <li><code>[dev]</code>: This is an \"extra\" defined in our <code>pyproject.toml</code>. It installs the optional groups of dependencies needed for running tests, checking code style, and building the documentation.</li> </ul> <p>You are now ready to start developing!</p>"},{"location":"contributing/#running-tests","title":"Running Tests","text":"<p>We use <code>pytest</code> for testing. High-quality, passing tests are required for any contribution to be merged.</p> <p>To run the entire test suite:</p> <pre><code>uv run pytest\n</code></pre> <p>To run tests in a specific file:</p> <pre><code>uv run pytest tests/test_animator.py\n</code></pre> <p>To run tests with code coverage:</p> <pre><code>uv run pytest --cov=src/ez_animate --cov-report=term-missing\n</code></pre>"},{"location":"contributing/#code-style-and-linting","title":"Code Style and Linting","text":"<p>To maintain a consistent and high-quality codebase, we use Ruff for code formatting and linting. Before submitting any code, please run this tool.</p>"},{"location":"contributing/#ruff-linter-and-formatter","title":"Ruff (Linter and Formatter)","text":"<p>Ruff is an extremely fast linter that helps catch common errors and style issues.</p> <pre><code># Check for any issues\nuv run ruff check .\n\n# Automatically fix any fixable issues\nuv run ruff check . --fix\n</code></pre> <p>The CI/CD pipeline will fail if your code is not properly formatted, so it's best to run this before committing.</p>"},{"location":"contributing/#type-checking-mypy","title":"Type checking (mypy)","text":"<p>We use mypy for static type checking with a strict-ish configuration defined in <code>pyproject.toml</code>.</p> <pre><code># Install lint extras if not already installed\nuv pip install -e .[lint]\n\n# Run mypy for the repository (defaults to checking src/ez_animate)\nuv run mypy\n\n# Or explicitly target the package\nuv run mypy src/ez_animate\n</code></pre> <p>Notes: - The package is typed (includes <code>py.typed</code>). - The NumPy mypy plugin is enabled; <code>numpy</code> must be installed (it is in dependencies).</p>"},{"location":"contributing/#building-the-documentation","title":"Building the Documentation","text":"<p>Our documentation is built with MkDocs. This allows you to preview your documentation changes locally before they are published.</p> <p>To start the live-reloading local server:</p> <pre><code>uv run mkdocs serve\n</code></pre> <p>Now, open your web browser and navigate to http://127.0.0.1:8000. The server will automatically rebuild the documentation and refresh your browser whenever you save a change in the <code>docs/</code> directory.</p>"},{"location":"contributing/#submitting-your-changes","title":"Submitting Your Changes","text":"<ol> <li>Create a New Branch: Start from the <code>main</code> branch and create a descriptive branch name for your feature or bugfix.     <pre><code>git checkout main\ngit pull origin main\ngit checkout -b feature/my-cool-animation\n</code></pre></li> <li>Make Your Changes: Write your code and the corresponding tests.</li> <li>Test and Lint: Run the tests and linters to ensure everything is correct.     <pre><code>uv run pytest\nuv run ruff check . --fix\nuv run ruff format .\n</code></pre></li> <li>Commit Your Code: Use a descriptive commit message following the Conventional Commits standard.     <pre><code>git add .\ngit commit -m \"feat: Add new FadeIn animation effect\"\n</code></pre></li> <li>Push to Your Fork: <pre><code>git push origin feature/my-cool-animation\n</code></pre></li> <li>Open a Pull Request: Go to the <code>ez-animate</code> repository on GitHub and open a Pull Request from your fork's branch to the <code>main</code> branch. Provide a clear description of your changes.</li> </ol>"},{"location":"contributing/#dependency-management","title":"Dependency Management","text":"<p>The project's dependencies are defined in <code>pyproject.toml</code>.</p> <ul> <li>Core dependencies are listed under <code>[project.dependencies]</code>. These are required for the package to run.</li> <li>Development dependencies are listed under <code>[project.optional-dependencies]</code>.</li> </ul> <p>If you need to add or remove a dependency, please update <code>pyproject.toml</code> accordingly and mention it in your Pull Request.</p>"},{"location":"gallery/","title":"Animation Gallery","text":"<p>Welcome to the <code>ez-animate</code> gallery! Our animations are compatible with both Scikit-learn and <code>sega_learn</code> models. Browse the examples below to see what you can create.</p>"},{"location":"gallery/#scikit-learn-examples","title":"Scikit-learn Examples","text":"<ul> <li> <p>Classification Gradient Boosting Classifier</p> </li> <li> <p>Classification SGD</p> </li> <li> <p>Clustering Kmeans</p> </li> <li> <p>Clustering Kmeans Traced</p> </li> <li> <p>Forecast Quantile Regressor</p> </li> <li> <p>Regression Lasso</p> </li> <li> <p>Regression SGD</p> </li> </ul>"},{"location":"gallery/#sega-learn-examples","title":"Sega-learn Examples","text":"<ul> <li> <p>Classification Logistic Regression</p> </li> <li> <p>Classification Perceptron</p> </li> <li> <p>Clustering DBSCAN</p> </li> <li> <p>Forecast Exponential Moving Average</p> </li> <li> <p>Forecast RANSAC</p> </li> <li> <p>Forecast Ridge</p> </li> <li> <p>Forecast Weighted Moving Average</p> </li> <li> <p>Regression Ridge</p> </li> </ul>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#installation","title":"Installation","text":"<p>To get started with <code>ez-animate</code>, you can install it via pip: <pre><code>pip install ez-animate\n</code></pre></p> <p>Or, for development:</p> <pre><code>git clone https://github.com/SantiagoEnriqueGA/ez-animate.git\ncd ez-animate\nuv venv\n.venv\\Scripts\\Activate.ps1  # On Windows PowerShell\n.venv\\Scripts\\activate.bat    # On Windows CMD\nsource .venv/bin/activate   # On macOS/Linux\nuv pip install -e .[test,lint,docs]\n</code></pre>"},{"location":"getting_started/#quickstart","title":"Quickstart","text":"<pre><code>from ez_animate import RegressionAnimation\n\n# Create and run the animation\nanimator = RegressionAnimation(\n    model=Lasso,    # Scikit-learn or sega_learn model class\n    X=X,\n    y=y,\n    test_size=0.25,\n    dynamic_parameter=\"alpha\",\n    static_parameters={\"max_iter\": 1, \"fit_intercept\": True},\n    keep_previous=True,\n    metric_fn=Metrics.mean_squared_error,\n)\n\n# Set up the plot\nanimator.setup_plot(\n    title=\"Regression Animation\",\n    xlabel=\"Feature Coefficient\",\n    ylabel=\"Target Value\",\n)\n\n# Create the animation\nanimator.animate(frames=np.arange(0.01, 1.0, 0.01))\n\n# Show and save the animation\nanimator.show()\nanimator.save(\"regression_animation.gif\")\n</code></pre> <p>See Usage for more details.</p>"},{"location":"usage/","title":"Usage","text":"<p><code>ez-animate</code> is compatible with both Scikit-learn and sega_learn models, making it a versatile tool for creating animations of machine learning model behavior. See below for examples of how to use <code>ez-animate</code> with different types of models. Or see API Reference for more details on available methods and customization options.</p> <p>More advanced usage examples can be found on GitHub.</p>"},{"location":"usage/#complete-scikit-learn-example","title":"Complete Scikit-learn Example","text":"<p>This section demonstrates how to use <code>ez-animate</code> with a Scikit-learn SGD regression model to create an animation of the model's predictions for max_iter values ranging from 1 to 100.</p> <p><pre><code>import numpy as np\n\nfrom ez_animate import RegressionAnimation\nfrom sega_learn.utils import Metrics, make_regression\nfrom sklearn.linear_model import SGDRegressor\n\n# Generate synthetic regression data\nX, y = make_regression(n_samples=1000, n_features=1)\n\n# Create the animation using RegressionAnimation\nanimator = RegressionAnimation(\n    model=SGDRegressor,\n    X=X,\n    y=y,\n    test_size=0.25,\n    dynamic_parameter=\"max_iter\",\n    static_parameters={\"fit_intercept\": True, \"eta0\": 0.0005},\n    keep_previous=True,\n    max_previous=25,\n    metric_fn=[\n        Metrics.r_squared,\n        Metrics.mean_squared_error,\n    ],\n    plot_metric_progression=True,\n    max_metric_subplots=2,\n)\n\n# Set up the plot\nanimator.setup_plot(\n    title=\"SGD Regression Animation\",\n    xlabel=\"Feature Coefficient\",\n    ylabel=\"Target Value\",\n    legend_loc=\"upper left\",\n    grid=True,\n    figsize=(14, 6),\n)\n\n# Create and save the animation\niter_range = np.arange(1, 100, 1)\nanimator.animate(frames=iter_range, interval=150, blit=False, repeat=True)\nanimator.show()\n</code></pre> </p>"},{"location":"usage/#complete-sega_learn-example","title":"Complete sega_learn Example","text":"<p>This section demonstrates how to use <code>ez-animate</code> with a time series forecasting model from <code>sega_learn</code> to animate the effect of the <code>alpha</code> parameter in Exponential Moving Average forecasting.</p> <p><pre><code>import numpy as np\n\nfrom ez_animate import ForecastingAnimation\nfrom sega_learn.time_series.moving_average import ExponentialMovingAverage\nfrom sega_learn.utils import Metrics, make_time_series\n\n# Generate a synthetic time series\ntime_series = make_time_series(\n    n_samples=1,\n    n_timestamps=300,\n    n_features=1,\n    trend=\"linear\",\n    seasonality=\"sine\",\n    seasonality_period=30,\n    noise=0.1,\n    random_state=1,\n)\n\n# Flatten the time series to 1D if it's not already\ntime_series = time_series.flatten()\n\n# Split into training and testing sets\ntrain_size = int(len(time_series) * 0.8)\ntrain_series, test_series = time_series[:train_size], time_series[train_size:]\nforecast_steps = len(test_series)\n\n# Create the animation using ForecastingAnimation\nanimator = ForecastingAnimation(\n    model=ExponentialMovingAverage,\n    train_series=train_series,\n    test_series=test_series,\n    forecast_steps=forecast_steps,\n    keep_previous=True,\n    dynamic_parameter=\"alpha\",\n    metric_fn=[\n        Metrics.mean_squared_error,\n        Metrics.mean_absolute_error,\n    ],\n)\n\n# Set up the plot\nanimator.setup_plot(\n    title=\"Exponential Moving Average Forecast\",\n    xlabel=\"Time Step\",\n    ylabel=\"Value\",\n    legend_loc=\"upper left\",\n    grid=True,\n    figsize=(12, 6),\n)\n\n# Create and show the animation\nalpha_range = np.arange(0.01, 0.5, 0.01)\nanimator.animate(frames=alpha_range, interval=150, blit=True, repeat=False)\nanimator.show()\n</code></pre> </p>"},{"location":"usage/#specific-features","title":"Specific Features","text":"<p>This section highlights some of the key features of <code>ez-animate</code> and how to use them with the <code>AnimationBase</code> class and its subclasses.</p>"},{"location":"usage/#customizing-figures-and-axes","title":"Customizing Figures and Axes","text":"<p>You can customize the plot's title, axis labels, grid, legend location, and figure size using the <code>setup_plot</code> method:</p> <pre><code>animator.setup_plot(\n    title=\"Custom Animation Title\",\n    xlabel=\"X Axis Label\",\n    ylabel=\"Y Axis Label\",\n    legend_loc=\"upper right\",\n    grid=True,\n    figsize=(10, 5),\n)\n</code></pre>"},{"location":"usage/#saving-animations","title":"Saving Animations","text":"<p>After creating an animation, you can save it as a GIF or MP4 using the <code>save</code> method:</p> <pre><code>animator.save(\n    filename=\"my_animation.gif\",  # or \"my_animation.mp4\"\n    writer=\"pillow\",              # or \"ffmpeg\" for MP4\n    fps=10,\n    dpi=150,\n)\n</code></pre>"},{"location":"usage/#controlling-animation-speed-and-playback","title":"Controlling Animation Speed and Playback","text":"<p>You can control the speed of the animation using the <code>interval</code> parameter in the <code>animate</code> method (milliseconds between frames), and set whether the animation repeats:</p> <pre><code>animator.animate(frames=range(1, 100), interval=100, blit=True, repeat=False)\n</code></pre>"},{"location":"usage/#additional-notes","title":"Additional Notes","text":"<ul> <li>The <code>AnimationBase</code> class is designed for extensibility. Subclasses like <code>RegressionAnimation</code>, <code>ClassificationAnimation</code>, and <code>ForecastingAnimation</code> implement model-specific logic.</li> <li>You can pass additional keyword arguments to customize plot elements or metrics.</li> <li>The <code>show()</code> method displays the animation in a Matplotlib window.</li> </ul> <p>See API Reference for more details on available methods and customization options.</p>"},{"location":"gallery_examples/sega_learn_classification_logisticRegression/","title":"Classification Logistic Regression","text":"<p>Back to the Gallery Index.</p>"},{"location":"gallery_examples/sega_learn_classification_perceptron/","title":"Classification Perceptron","text":"<p>Back to the Gallery Index.</p>"},{"location":"gallery_examples/sega_learn_clustering_dbscan/","title":"Clustering DBSCAN","text":"<p>Back to the Gallery Index.</p>"},{"location":"gallery_examples/sega_learn_forecast_exponentialMovingAverage/","title":"Forecast Exponential Moving Average","text":"<p>Back to the Gallery Index.</p>"},{"location":"gallery_examples/sega_learn_forecast_ransac/","title":"Forecast RANSAC","text":"<p>Back to the Gallery Index.</p>"},{"location":"gallery_examples/sega_learn_forecast_ridge/","title":"Forecast Ridge","text":"<p>Back to the Gallery Index.</p>"},{"location":"gallery_examples/sega_learn_forecast_weightedMovingAverage/","title":"Forecast Weighted Moving Average","text":"<p>Back to the Gallery Index.</p>"},{"location":"gallery_examples/sega_learn_regression_ridge/","title":"Regression Ridge","text":"<p>Back to the Gallery Index.</p>"},{"location":"gallery_examples/sklearn_classification_gradientBoostingClassifier/","title":"Classification Gradient Boosting Classifier","text":"<p>Back to the Gallery Index.</p>"},{"location":"gallery_examples/sklearn_classification_sgd/","title":"Classification SGD","text":"<p>Back to the Gallery Index.</p>"},{"location":"gallery_examples/sklearn_clustering_kmeans/","title":"Clustering Kmeans","text":"<p>Back to the Gallery Index.</p>"},{"location":"gallery_examples/sklearn_clustering_kmeans_traced/","title":"Clustering Kmeans Traced","text":"<p>Back to the Gallery Index.</p>"},{"location":"gallery_examples/sklearn_forecast_quantileRegressor/","title":"Forecast Quantile Regressor","text":"<p>Back to the Gallery Index.</p>"},{"location":"gallery_examples/sklearn_regression_lasso/","title":"Regression Lasso","text":"<p>Back to the Gallery Index.</p>"},{"location":"gallery_examples/sklearn_regression_sgd/","title":"Regression SGD","text":"<p>Back to the Gallery Index.</p>"}]}